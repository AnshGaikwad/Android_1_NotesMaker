Index: app/src/main/java/com/example/notesmaker/NotesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesmaker;\r\n\r\nimport android.Manifest;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.getbase.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.ml.vision.FirebaseVision;\r\nimport com.google.firebase.ml.vision.common.FirebaseVisionImage;\r\nimport com.google.firebase.ml.vision.text.FirebaseVisionText;\r\nimport com.google.firebase.ml.vision.text.FirebaseVisionTextDetector;\r\nimport com.ml.quaterion.text2summary.Text2Summary;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport kotlin.jvm.internal.Ref.ObjectRef;\r\n\r\npublic class NotesActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener{\r\n\r\n    private static final int REQUEST_CODE_STORAGE_PERMISSION = 1;\r\n    private static final int REQUEST_CODE_SELECT_IMAGE = 1;\r\n    private static final int REQUEST_CODE_SELECT_DOC = 10;\r\n    static final int REQUEST_IMAGE_CAPTURE = 2;\r\n\r\n    private DrawerLayout drawer;\r\n\r\n    RecyclerView PDFList;\r\n    PdfListAdapter pdfListAdapter;\r\n    LinearLayoutManager linearLayoutManager;\r\n    File[] allPdfList;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_notes);\r\n\r\n        initRecyclerView();\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n        drawer = findViewById(R.id.drawer_layout);\r\n        NavigationView navigationView = findViewById(R.id.nav_view);\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n\r\n\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar,\r\n                R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawer.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n\r\n\r\n\r\n        pdfListAdapter.setOnItemClickListener(new PdfListAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(int position) {\r\n                Intent intent = new Intent(NotesActivity.this, PdfActivity.class);\r\n                // passing current pdf from here\r\n                String pdfpath = allPdfList[position].getPath();\r\n\r\n\r\n                Log.d(\"chk\", pdfpath);\r\n\r\n                intent.putExtra(\"PdfPath\", pdfpath);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        FloatingActionButton camFab = findViewById(R.id.fab_cam);\r\n        camFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // amey let ur code go here...\r\n                {\r\n                    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n                    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n                        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        FloatingActionButton imgFab = findViewById(R.id.fab_image);\r\n        imgFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if(ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\r\n                    ActivityCompat.requestPermissions(\r\n                            NotesActivity.this,\r\n                            new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                            REQUEST_CODE_STORAGE_PERMISSION\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    selectImage();\r\n                }\r\n            }\r\n        });\r\n\r\n//        FloatingActionButton docFab = findViewById(R.id.fab_doc);\r\n//        docFab.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View view) {\r\n//                Intent myFileIntent = new Intent(Intent.ACTION_GET_CONTENT);\r\n//                myFileIntent.setType(\"*/*\");\r\n//                startActivityForResult(myFileIntent, REQUEST_CODE_SELECT_DOC);\r\n//            }\r\n//        });\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (drawer.isDrawerOpen(GravityCompat.START)) {\r\n            drawer.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    private void initRecyclerView() {\r\n        try {\r\n            String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/MyPdf\";\r\n            File directory = new File(path);\r\n            File[] allFiles = directory.listFiles();\r\n            PDFList = findViewById(R.id.pdfList);\r\n\r\n            allPdfList = getPDFs(allFiles);\r\n            pdfListAdapter = new PdfListAdapter(NotesActivity.this, allPdfList);\r\n            linearLayoutManager = new LinearLayoutManager(this);\r\n\r\n            PDFList.setLayoutManager(linearLayoutManager);\r\n            PDFList.setAdapter(pdfListAdapter);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void deleteNote(final int position)\r\n    {\r\n        if(allPdfList[position].exists())\r\n        {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(NotesActivity.this);\r\n            builder.setMessage(\"Do you want to delete this Note?\")\r\n                    .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            allPdfList[position].delete();\r\n//                            Toast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\r\n                            initRecyclerView();\r\n                        }\r\n                    })\r\n                    .setNegativeButton(\"No\", null);\r\n            AlertDialog alertDialog = builder.create();\r\n            alertDialog.show();\r\n        }\r\n        else\r\n        {\r\n            Toast.makeText(this, \"ERROR\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    private File[] getPDFs(File[] allFiles) {\r\n        int i = 0;\r\n        File[] PDFs = new File[allFiles.length];\r\n        for(File f: allFiles){\r\n            if (f.isFile() && f.getPath().endsWith(\".pdf\")){\r\n                PDFs[i] = f;\r\n                i++;\r\n            }\r\n        }\r\n        return PDFs;\r\n    }\r\n\r\n    private void selectImage() {\r\n        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n        if(intent.resolveActivity(getPackageManager())!=null)\r\n        {\r\n            startActivityForResult(intent, REQUEST_CODE_SELECT_IMAGE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n\r\n        if(requestCode == REQUEST_CODE_STORAGE_PERMISSION && grantResults.length>0)\r\n        {\r\n            selectImage();\r\n        }\r\n        else\r\n        {\r\n            Toast.makeText(this, \"Permission Denied!!!\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\r\n            Bundle extras = data.getExtras();\r\n            Bitmap imageBitmap = (Bitmap) extras.get(\"data\");\r\n            getTextFromBitmap(imageBitmap);\r\n        }\r\n\r\n\r\n        if (requestCode == REQUEST_CODE_SELECT_IMAGE && resultCode == RESULT_OK) {\r\n            if (data != null) {\r\n\r\n                Uri selectedImageUri = data.getData();\r\n                if (selectedImageUri != null) {\r\n                    InputStream inputStream = null;\r\n                    try {\r\n                        inputStream = getContentResolver().openInputStream(selectedImageUri);\r\n                        Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\r\n//                        varun u can get the bitmap from here for ocr...\r\n                        getTextFromBitmap(bitmap);\r\n\r\n                    } catch (FileNotFoundException e) {\r\n                        e.printStackTrace();\r\n                        Toast.makeText(this, \"Exception\" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if(requestCode == REQUEST_CODE_SELECT_DOC && resultCode == RESULT_OK){\r\n            // doc code will go here ...\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void getTextFromBitmap(Bitmap imageBitmap) {\r\n        //Enter your code from here Varun\r\n        FirebaseVisionImage image = FirebaseVisionImage.fromBitmap(imageBitmap);\r\n        FirebaseVisionTextDetector textDetector = FirebaseVision.getInstance().getVisionTextDetector();\r\n        textDetector.detectInImage(image).addOnSuccessListener(new OnSuccessListener<FirebaseVisionText>() {\r\n            @Override\r\n            public void onSuccess(FirebaseVisionText firebaseVisionText) {\r\n                displayTextFromImage(firebaseVisionText);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                Toast.makeText(NotesActivity.this, \"Error: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void displayTextFromImage(FirebaseVisionText firebaseVisionText) {\r\n        List<FirebaseVisionText.Block> blockList = firebaseVisionText.getBlocks();\r\n        String text = \"\";\r\n        if(blockList.size() == 0){\r\n            Toast.makeText(this, \"No Text found in image\", Toast.LENGTH_SHORT).show();\r\n        }else{\r\n            for (FirebaseVisionText.Block block : firebaseVisionText.getBlocks()){\r\n                 text += block.getText() + \"\\n\";\r\n            }\r\n\r\n           // previewText(text);\r\n          //  Log.d(\"chk\", text);\r\n            //Use the text from here aditya\r\n\r\n            // Dialog box\r\n            // Initializing a dialog box\r\n            final android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(NotesActivity.this);\r\n            View mView = getLayoutInflater().inflate(R.layout.dialog, null);\r\n\r\n            // declaring edit text\\\r\n            final EditText namePdf = mView.findViewById(R.id.name_note);\r\n            final EditText editText = mView.findViewById(R.id.edit_text);\r\n            final Button button = mView.findViewById(R.id.button);\r\n            final Button button2 = mView.findViewById(R.id.button2);\r\n            // setting view\r\n            builder.setView(mView);\r\n//\r\n//            // prevents off screen touches\r\n            builder.setCancelable(false);\r\n\r\n            final String copiedText = text;\r\n            editText.setText(copiedText);\r\n\r\n            button.setOnClickListener(new View.OnClickListener() {\r\n                public void onClick(View v) {\r\n                    String finalText = summarizeText(copiedText);\r\n                    editText.setText(finalText);\r\n                }\r\n            });\r\n\r\n            button2.setOnClickListener(new View.OnClickListener() {\r\n                public void onClick(View v) {\r\n                    editText.setText(copiedText);\r\n                }\r\n            });\r\n\r\n            builder.setPositiveButton(\"Save as PDF\", new DialogInterface.OnClickListener() {\r\n                @Override\r\n                public void onClick(DialogInterface dialogInterface, int i) {\r\n                    String finalText = editText.getText().toString();\r\n                    String nameNote = namePdf.getText().toString();\r\n                    saveToPDF(finalText, nameNote);\r\n\r\n                }\r\n            });\r\n\r\n            // setting neg btn\r\n            builder.setNegativeButton(\"Discard\", null);\r\n\r\n            //show\r\n            builder.show();\r\n\r\n        }\r\n    }\r\n\r\n    private void saveToPDF(String text, String name)\r\n    {\r\n        if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED){\r\n\r\n            if(text.isEmpty())\r\n            {\r\n                Toast.makeText(this, \"Nothing to save, Text is empty\", Toast.LENGTH_SHORT).show();\r\n            }\r\n            else {\r\n                String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/MyPdf\";\r\n\r\n                PDF pdf = new PDF();\r\n                pdf.addParagraph(text);\r\n                pdf.makeDocument(path, name);\r\n\r\n                Toast.makeText(this, \"Note Saved as a PDF in \" + path, Toast.LENGTH_SHORT).show();\r\n\r\n                initRecyclerView();\r\n            }\r\n\r\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if(shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)){\r\n                AlertDialog.Builder alert = new AlertDialog.Builder(this);\r\n                alert.setTitle(\"Storage Permission Needed\");\r\n                alert.setMessage(\"We need storage permission to store the PDF on your device. Please grant storage permission.\");\r\n                alert.setPositiveButton(\"Okay\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        requestPermissions(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 01);\r\n                    }\r\n                });\r\n                alert.show();\r\n            } else {\r\n                requestPermissions(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 01);\r\n            }\r\n        }\r\n    }\r\n\r\n    private String summarizeText(String text)\r\n    {\r\n        final ObjectRef summary = new ObjectRef();\r\n        summary.element = Text2Summary.Companion.summarize(text, 0.4F);\r\n        //  TV.setText((CharSequence)((String)summary.element));\r\n//        previewText((String)summary.element);\r\n        return (String)summary.element;\r\n    }\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n        switch (menuItem.getItemId()) {\r\n            case R.id.nav_sync:\r\n                Toast.makeText(this, \"Sync\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n            case R.id.nav_settings:\r\n                Toast.makeText(this, \"Settings\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n            case R.id.nav_logout:\r\n                Toast.makeText(this, \"Log out\", Toast.LENGTH_SHORT).show();\r\n                startActivity(new Intent(getApplicationContext(), MainActivity.class));\r\n                break;\r\n            case R.id.nav_read:\r\n                Toast.makeText(this, \"Read\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n            case R.id.nav_contact:\r\n                Toast.makeText(this, \"Contact\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n        }\r\n        drawer.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n//   private void previewText(String string){\r\n//        textView.setText(string);\r\n//   }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/notesmaker/NotesActivity.java	(revision 042e5dd0d4f96dfbd7449498fdea3537a5c41913)
+++ app/src/main/java/com/example/notesmaker/NotesActivity.java	(date 1605257930234)
@@ -16,7 +16,6 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
@@ -36,10 +35,14 @@
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;
 import com.google.android.material.navigation.NavigationView;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
 import com.google.firebase.ml.vision.FirebaseVision;
 import com.google.firebase.ml.vision.common.FirebaseVisionImage;
 import com.google.firebase.ml.vision.text.FirebaseVisionText;
 import com.google.firebase.ml.vision.text.FirebaseVisionTextDetector;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
 import com.ml.quaterion.text2summary.Text2Summary;
 
 import java.io.File;
@@ -63,13 +66,31 @@
     LinearLayoutManager linearLayoutManager;
     File[] allPdfList;
 
+    FirebaseAuth mAuth;
+    FirebaseUser mUser;
+    FirebaseStorage storage;
+    StorageReference userStorage;
+    StorageReference pdfStorage;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_notes);
 
+        mAuth = FirebaseAuth.getInstance();
+        mUser = mAuth.getCurrentUser();
+
+        if (mUser!=null){
+            storage = FirebaseStorage.getInstance();
+            userStorage = storage.getReference();
+            userStorage = userStorage.child(mUser.getUid());
+            pdfStorage = userStorage.child("PDFs");
+        }
+
+        PDFList = findViewById(R.id.pdfList);
         initRecyclerView();
 
+
         Toolbar toolbar = findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
 
@@ -85,20 +106,7 @@
 
 
 
-        pdfListAdapter.setOnItemClickListener(new PdfListAdapter.OnItemClickListener() {
-            @Override
-            public void onItemClick(int position) {
-                Intent intent = new Intent(NotesActivity.this, PdfActivity.class);
-                // passing current pdf from here
-                String pdfpath = allPdfList[position].getPath();
-
 
-                Log.d("chk", pdfpath);
-
-                intent.putExtra("PdfPath", pdfpath);
-                startActivity(intent);
-            }
-        });
 
         FloatingActionButton camFab = findViewById(R.id.fab_cam);
         camFab.setOnClickListener(new View.OnClickListener() {
@@ -158,12 +166,27 @@
             String path = Environment.getExternalStorageDirectory().getAbsolutePath() + "/MyPdf";
             File directory = new File(path);
             File[] allFiles = directory.listFiles();
-            PDFList = findViewById(R.id.pdfList);
+
 
             allPdfList = getPDFs(allFiles);
             pdfListAdapter = new PdfListAdapter(NotesActivity.this, allPdfList);
             linearLayoutManager = new LinearLayoutManager(this);
 
+            pdfListAdapter.setOnItemClickListener(new PdfListAdapter.OnItemClickListener() {
+                @Override
+                public void onItemClick(int position) {
+                    Intent intent = new Intent(NotesActivity.this, PdfActivity.class);
+                    // passing current pdf from here
+                    String pdfpath = allPdfList[position].getPath();
+
+
+                    Log.d("chk", pdfpath);
+
+                    intent.putExtra("PdfPath", pdfpath);
+                    startActivity(intent);
+                }
+            });
+
             PDFList.setLayoutManager(linearLayoutManager);
             PDFList.setAdapter(pdfListAdapter);
         } catch (Exception e){
@@ -171,8 +194,7 @@
         }
     }
 
-    public void deleteNote(final int position)
-    {
+    public void deleteNote(final int position) {
         if(allPdfList[position].exists())
         {
             AlertDialog.Builder builder = new AlertDialog.Builder(NotesActivity.this);
@@ -352,8 +374,7 @@
         }
     }
 
-    private void saveToPDF(String text, String name)
-    {
+    private void saveToPDF(String text, String name) {
         if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED){
 
             if(text.isEmpty())
@@ -365,7 +386,16 @@
 
                 PDF pdf = new PDF();
                 pdf.addParagraph(text);
-                pdf.makeDocument(path, name);
+                File file = pdf.makeDocument(path, name);
+
+                if (mUser!=null){
+                    if (file != null){
+                        StorageReference tempFile = pdfStorage.child("Name2");
+                        tempFile.putFile(Uri.fromFile(file));
+                        Log.i("Cloud", "Uploaded");
+                    }
+                }
+
 
                 Toast.makeText(this, "Note Saved as a PDF in " + path, Toast.LENGTH_SHORT).show();
 
@@ -390,8 +420,7 @@
         }
     }
 
-    private String summarizeText(String text)
-    {
+    private String summarizeText(String text) {
         final ObjectRef summary = new ObjectRef();
         summary.element = Text2Summary.Companion.summarize(text, 0.4F);
         //  TV.setText((CharSequence)((String)summary.element));
@@ -403,6 +432,7 @@
     public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
         switch (menuItem.getItemId()) {
             case R.id.nav_sync:
+                startActivity(new Intent(getApplicationContext(), CloudNotes.class));
                 Toast.makeText(this, "Sync", Toast.LENGTH_SHORT).show();
                 break;
             case R.id.nav_settings:
@@ -426,4 +456,8 @@
 //   private void previewText(String string){
 //        textView.setText(string);
 //   }
+
+    public void uploadFile(){
+
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/notesmaker/PDF.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesmaker;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.util.Log;\r\n\r\nimport com.itextpdf.text.Document;\r\nimport com.itextpdf.text.DocumentException;\r\nimport com.itextpdf.text.Font;\r\nimport com.itextpdf.text.Image;\r\nimport com.itextpdf.text.Paragraph;\r\nimport com.itextpdf.text.pdf.PdfWriter;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.Locale;\r\n\r\n\r\n//Use this class to create a PDF object.\r\n//Use addPage() command to add pages and addParagraph(text) command to add a paragraph to the document.\r\n//One page is generated by default\r\n//Use makeDocument(path) to create the document and save it to memory\r\nclass PDF {\r\n    Document document;\r\n    int i=0;\r\n    int page=0;\r\n    //Array to save Actions\r\n    String data[][] = new String[100][2];\r\n\r\n    //Add a paragraph\r\n    public void addParagraph(String text){\r\n        data[i][0] = \"Para\";\r\n        data[i][1] = text;\r\n        i++;\r\n    }\r\n\r\n    //Add a page\r\n    public void addPage(){\r\n        data[i][0] = \"page\";\r\n        data[i][1] = String.valueOf(page);\r\n        i++;\r\n        page++;\r\n    }\r\n\r\n    //Code to make the document\r\n    public void makeDocument(String path, String name){\r\n\r\n        document = new Document();\r\n        File dir;\r\n\r\n        try {\r\n            dir = new File(path);\r\n            if(!dir.exists())\r\n                dir.mkdirs();\r\n\r\n            File file = new File(dir, getName(name));\r\n            FileOutputStream fOut = new FileOutputStream(file);\r\n\r\n            PdfWriter.getInstance(document, fOut);\r\n\r\n            //open the document\r\n            document.open();\r\n            document.newPage();\r\n            page = 1;\r\n\r\n            //Create a Font Object\r\n            Font paraFont= new Font();\r\n            paraFont.setFamily(String.valueOf(Font.FontFamily.TIMES_ROMAN));\r\n\r\n            //Adding data from array to document\r\n            for (int j=0; j<data.length; j++){\r\n                if (data[j][0]!=null){\r\n                    switch (data[j][0]){\r\n                        case \"Para\":{\r\n                            Paragraph paragraph = new Paragraph(data[j][1], paraFont);\r\n                            document.add(paragraph);\r\n                            break;\r\n                        }\r\n\r\n                        case \"page\":{\r\n                            document.newPage();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (DocumentException de) {\r\n            Log.e(\"PDFCreator\", \"DocumentException:\" + de);\r\n        } catch (IOException e) {\r\n            Log.e(\"PDFCreator\", \"ioException:\" + e);\r\n        } finally {\r\n            document.close();\r\n        }\r\n    }\r\n\r\n    String getName(String name){;\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd-hh-mm-ss\", Locale.ENGLISH);\r\n        Date now = new Date();\r\n\r\n        String pdfName = (name + \"_\" + formatter.format(now) + \".pdf\");\r\n        return pdfName;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/notesmaker/PDF.java	(revision 042e5dd0d4f96dfbd7449498fdea3537a5c41913)
+++ app/src/main/java/com/example/notesmaker/PDF.java	(date 1605257517963)
@@ -47,17 +47,18 @@
     }
 
     //Code to make the document
-    public void makeDocument(String path, String name){
+    public File makeDocument(String path, String name){
 
         document = new Document();
-        File dir;
-
+        File dir, file;
+        file = null;
         try {
             dir = new File(path);
             if(!dir.exists())
                 dir.mkdirs();
 
-            File file = new File(dir, getName(name));
+
+            file = new File(dir, getName(name));
             FileOutputStream fOut = new FileOutputStream(file);
 
             PdfWriter.getInstance(document, fOut);
@@ -96,9 +97,11 @@
         } finally {
             document.close();
         }
+
+        return file;
     }
 
-    String getName(String name){;
+    String getName(String name){
         SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss", Locale.ENGLISH);
         Date now = new Date();
 
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.notesmaker\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'com.github.joielechong:countrycodepicker:2.4.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    implementation 'com.google.firebase:firebase-auth:16.0.5'\r\n    implementation 'com.google.firebase:firebase-ml-vision:15.0.0'\r\n    implementation 'com.getbase:floatingactionbutton:1.10.1'\r\n    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'\r\n    implementation files('../itextg-5.5.10.jar')\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.github.shubham0204:Text2Summary-Android:alpha-05'\r\n\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:1.3.72\"\r\n    implementation 'androidx.core:core-ktx:1.1.0'\r\n    implementation 'com.google.android.material:material:1.0.0'\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'\r\n\r\n\r\n\r\n}\r\n\r\nbuildscript {\r\n\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.0'\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 042e5dd0d4f96dfbd7449498fdea3537a5c41913)
+++ app/build.gradle	(date 1605256332364)
@@ -29,11 +29,12 @@
     implementation 'com.github.joielechong:countrycodepicker:2.4.2'
     implementation 'androidx.appcompat:appcompat:1.2.0'
     implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
-    implementation 'com.google.firebase:firebase-auth:16.0.5'
+    implementation 'com.google.firebase:firebase-auth:20.0.1'
     implementation 'com.google.firebase:firebase-ml-vision:15.0.0'
     implementation 'com.getbase:floatingactionbutton:1.10.1'
     implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
     implementation files('../itextg-5.5.10.jar')
+    implementation 'com.google.firebase:firebase-storage:19.1.1'
     testImplementation 'junit:junit:4.12'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
@@ -58,7 +59,7 @@
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.1.0'
+        classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.2.0'
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.notesmaker\">\r\n\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera\"\r\n        android:required=\"true\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:requestLegacyExternalStorage=\"true\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n\r\n        <activity\r\n            android:name=\".HomeActivity\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\"/>\r\n        <activity android:name=\".Register\" />\r\n        <activity android:name=\".PdfActivity\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            tools:ignore=\"Instantiatable\" />\r\n        <activity android:name=\".NotesActivity\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 042e5dd0d4f96dfbd7449498fdea3537a5c41913)
+++ app/src/main/AndroidManifest.xml	(date 1605257027475)
@@ -5,6 +5,7 @@
 
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.INTERNET"/>
 
     <uses-feature
         android:name="android.hardware.camera"
@@ -18,16 +19,17 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-
+        <activity android:name=".CloudNotes"/>
         <activity
             android:name=".HomeActivity"
-            android:theme="@style/Theme.AppCompat.Light.NoActionBar"/>
+            android:theme="@style/Theme.AppCompat.Light.NoActionBar" />
         <activity android:name=".Register" />
         <activity android:name=".PdfActivity" />
         <activity
             android:name=".MainActivity"
             tools:ignore="Instantiatable" />
-        <activity android:name=".NotesActivity"
+        <activity
+            android:name=".NotesActivity"
             android:theme="@style/Theme.AppCompat.Light.NoActionBar">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url 'https://jitpack.io' }\r\n        \r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.0'\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n\r\n\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url \"https://jitpack.io\" }\r\n        \r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 042e5dd0d4f96dfbd7449498fdea3537a5c41913)
+++ build.gradle	(date 1605252528452)
@@ -9,7 +9,7 @@
         
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.1.0'
+        classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.2.0'
 
 
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Mon Nov 09 20:07:30 IST 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-bin.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision 042e5dd0d4f96dfbd7449498fdea3537a5c41913)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1605256001739)
@@ -1,6 +1,6 @@
-#Mon Nov 09 20:07:30 IST 2020
+#Fri Nov 13 13:56:41 IST 2020
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip
