Index: app/src/main/java/com/example/notesmaker/NotesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.notesmaker;\r\n\r\nimport android.Manifest;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.getbase.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.ml.vision.FirebaseVision;\r\nimport com.google.firebase.ml.vision.common.FirebaseVisionImage;\r\nimport com.google.firebase.ml.vision.text.FirebaseVisionText;\r\nimport com.google.firebase.ml.vision.text.FirebaseVisionTextDetector;\r\nimport com.ml.quaterion.text2summary.Text2Summary;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport kotlin.jvm.internal.Ref.ObjectRef;\r\n\r\npublic class NotesActivity extends AppCompatActivity {\r\n\r\n    private static final int REQUEST_CODE_STORAGE_PERMISSION = 1;\r\n    private static final int REQUEST_CODE_SELECT_IMAGE = 1;\r\n    private static final int REQUEST_CODE_SELECT_DOC = 10;\r\n    static final int REQUEST_IMAGE_CAPTURE = 2;\r\n\r\n    RecyclerView PDFList;\r\n    PdfListAdapter pdfListAdapter;\r\n    LinearLayoutManager linearLayoutManager;\r\n    File[] allPdfList;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_notes);\r\n\r\n        initRecyclerView();\r\n\r\n\r\n        FloatingActionButton camFab = findViewById(R.id.fab_cam);\r\n        camFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // amey let ur code go here...\r\n                {\r\n                    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n                    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n                        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        FloatingActionButton imgFab = findViewById(R.id.fab_image);\r\n        imgFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if(ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\r\n                    ActivityCompat.requestPermissions(\r\n                            NotesActivity.this,\r\n                            new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                            REQUEST_CODE_STORAGE_PERMISSION\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    selectImage();\r\n                }\r\n            }\r\n        });\r\n\r\n//        FloatingActionButton docFab = findViewById(R.id.fab_doc);\r\n//        docFab.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View view) {\r\n//                Intent myFileIntent = new Intent(Intent.ACTION_GET_CONTENT);\r\n//                myFileIntent.setType(\"*/*\");\r\n//                startActivityForResult(myFileIntent, REQUEST_CODE_SELECT_DOC);\r\n//            }\r\n//        });\r\n    }\r\n\r\n    private void initRecyclerView() {\r\n        try {\r\n            String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/MyPdf\";\r\n            File directory = new File(path);\r\n            File[] allFiles = directory.listFiles();\r\n            PDFList = findViewById(R.id.pdfList);\r\n\r\n            allPdfList = getPDFs(allFiles);\r\n            pdfListAdapter = new PdfListAdapter(allPdfList);\r\n            linearLayoutManager = new LinearLayoutManager(this);\r\n\r\n            PDFList.setLayoutManager(linearLayoutManager);\r\n            PDFList.setAdapter(pdfListAdapter);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        pdfListAdapter.setOnItemClickListener(new PdfListAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(int position) {\r\n                Intent intent = new Intent(NotesActivity.this, PdfActivity.class);\r\n                // passing current pdf from here\r\n                String pdfpath = allPdfList[position].getPath();\r\n\r\n\r\n                Log.d(\"chk\", pdfpath);\r\n\r\n                intent.putExtra(\"PdfPath\", pdfpath);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    private File[] getPDFs(File[] allFiles) {\r\n        int i = 0;\r\n        File[] PDFs = new File[allFiles.length];\r\n        for(File f: allFiles){\r\n            if (f.isFile() && f.getPath().endsWith(\".pdf\")){\r\n                PDFs[i] = f;\r\n                i++;\r\n            }\r\n        }\r\n        return PDFs;\r\n    }\r\n\r\n    private void selectImage() {\r\n        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n        if(intent.resolveActivity(getPackageManager())!=null)\r\n        {\r\n            startActivityForResult(intent, REQUEST_CODE_SELECT_IMAGE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n\r\n        if(requestCode == REQUEST_CODE_STORAGE_PERMISSION && grantResults.length>0)\r\n        {\r\n            selectImage();\r\n        }\r\n        else\r\n        {\r\n            Toast.makeText(this, \"Permission Denied!!!\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\r\n            Bundle extras = data.getExtras();\r\n            Bitmap imageBitmap = (Bitmap) extras.get(\"data\");\r\n            getTextFromBitmap(imageBitmap);\r\n        }\r\n\r\n\r\n        if (requestCode == REQUEST_CODE_SELECT_IMAGE && resultCode == RESULT_OK) {\r\n            if (data != null) {\r\n\r\n                Uri selectedImageUri = data.getData();\r\n                if (selectedImageUri != null) {\r\n                    InputStream inputStream = null;\r\n                    try {\r\n                        inputStream = getContentResolver().openInputStream(selectedImageUri);\r\n                        Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\r\n//                        varun u can get the bitmap from here for ocr...\r\n                        getTextFromBitmap(bitmap);\r\n\r\n                    } catch (FileNotFoundException e) {\r\n                        e.printStackTrace();\r\n                        Toast.makeText(this, \"Exception\" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if(requestCode == REQUEST_CODE_SELECT_DOC && resultCode == RESULT_OK){\r\n            // doc code will go here ...\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void getTextFromBitmap(Bitmap imageBitmap) {\r\n        //Enter your code from here Varun\r\n        FirebaseVisionImage image = FirebaseVisionImage.fromBitmap(imageBitmap);\r\n        FirebaseVisionTextDetector textDetector = FirebaseVision.getInstance().getVisionTextDetector();\r\n        textDetector.detectInImage(image).addOnSuccessListener(new OnSuccessListener<FirebaseVisionText>() {\r\n            @Override\r\n            public void onSuccess(FirebaseVisionText firebaseVisionText) {\r\n                displayTextFromImage(firebaseVisionText);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                Toast.makeText(NotesActivity.this, \"Error: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void displayTextFromImage(FirebaseVisionText firebaseVisionText) {\r\n        List<FirebaseVisionText.Block> blockList = firebaseVisionText.getBlocks();\r\n        String text = \"\";\r\n        if(blockList.size() == 0){\r\n            Toast.makeText(this, \"No Text found in image\", Toast.LENGTH_SHORT).show();\r\n        }else{\r\n            for (FirebaseVisionText.Block block : firebaseVisionText.getBlocks()){\r\n                 text += block.getText() + \"\\n\";\r\n            }\r\n\r\n           // previewText(text);\r\n          //  Log.d(\"chk\", text);\r\n            //Use the text from here aditya\r\n\r\n            // Dialog box\r\n            // Initializing a dialog box\r\n            final android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(NotesActivity.this);\r\n            View mView = getLayoutInflater().inflate(R.layout.dialog, null);\r\n\r\n            // declaring edit text\\\r\n            final EditText editText = mView.findViewById(R.id.edit_text);\r\n            final Button button = mView.findViewById(R.id.button);\r\n            final Button button2 = mView.findViewById(R.id.button2);\r\n            // setting view\r\n            builder.setView(mView);\r\n//\r\n//            // prevents off screen touches\r\n            builder.setCancelable(false);\r\n\r\n            final String copiedText = text;\r\n            editText.setText(copiedText);\r\n\r\n            button.setOnClickListener(new View.OnClickListener() {\r\n                public void onClick(View v) {\r\n                    String finalText = summarizeText(copiedText);\r\n                    editText.setText(finalText);\r\n                }\r\n            });\r\n\r\n            button2.setOnClickListener(new View.OnClickListener() {\r\n                public void onClick(View v) {\r\n                    editText.setText(copiedText);\r\n                }\r\n            });\r\n\r\n            builder.setPositiveButton(\"Save as PDF\", new DialogInterface.OnClickListener() {\r\n                @Override\r\n                public void onClick(DialogInterface dialogInterface, int i) {\r\n                    String finalText = editText.getText().toString();\r\n                    saveToPDF(finalText);\r\n\r\n                }\r\n            });\r\n\r\n            // setting neg btn\r\n            builder.setNegativeButton(\"Discard\", null);\r\n\r\n            //show\r\n            builder.show();\r\n\r\n        }\r\n    }\r\n\r\n    private void saveToPDF(String text)\r\n    {\r\n        if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED){\r\n\r\n            if(text.isEmpty())\r\n            {\r\n                Toast.makeText(this, \"Nothing to save, Text is empty\", Toast.LENGTH_SHORT).show();\r\n            }\r\n            else {\r\n                String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/MyPdf\";\r\n\r\n                PDF pdf = new PDF();\r\n                pdf.addParagraph(text);\r\n                pdf.makeDocument(path);\r\n\r\n                Toast.makeText(this, \"Note Saved as a PDF in \" + path, Toast.LENGTH_SHORT).show();\r\n\r\n                initRecyclerView();\r\n            }\r\n\r\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if(shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)){\r\n                AlertDialog.Builder alert = new AlertDialog.Builder(this);\r\n                alert.setTitle(\"Storage Permission Needed\");\r\n                alert.setMessage(\"We need storage permission to store the PDF on your device. Please grant storage permission.\");\r\n                alert.setPositiveButton(\"Okay\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        requestPermissions(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 01);\r\n                    }\r\n                });\r\n                alert.show();\r\n            } else {\r\n                requestPermissions(new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 01);\r\n            }\r\n        }\r\n    }\r\n\r\n    private String summarizeText(String text)\r\n    {\r\n        final ObjectRef summary = new ObjectRef();\r\n        summary.element = Text2Summary.Companion.summarize(text, 0.4F);\r\n        //  TV.setText((CharSequence)((String)summary.element));\r\n//        previewText((String)summary.element);\r\n        return (String)summary.element;\r\n    }\r\n\r\n//   private void previewText(String string){\r\n//        textView.setText(string);\r\n//   }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/notesmaker/NotesActivity.java	(revision c3565c05b2813159c2c695d0c3fdd6709c656932)
+++ app/src/main/java/com/example/notesmaker/NotesActivity.java	(date 1605157605349)
@@ -60,6 +60,8 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_notes);
 
+        PDFList = findViewById(R.id.pdfList);
+
         initRecyclerView();
 
 
@@ -112,32 +114,34 @@
             String path = Environment.getExternalStorageDirectory().getAbsolutePath() + "/MyPdf";
             File directory = new File(path);
             File[] allFiles = directory.listFiles();
-            PDFList = findViewById(R.id.pdfList);
+
 
             allPdfList = getPDFs(allFiles);
             pdfListAdapter = new PdfListAdapter(allPdfList);
             linearLayoutManager = new LinearLayoutManager(this);
 
-            PDFList.setLayoutManager(linearLayoutManager);
-            PDFList.setAdapter(pdfListAdapter);
-        } catch (Exception e){
-            e.printStackTrace();
-        }
-
-        pdfListAdapter.setOnItemClickListener(new PdfListAdapter.OnItemClickListener() {
-            @Override
-            public void onItemClick(int position) {
-                Intent intent = new Intent(NotesActivity.this, PdfActivity.class);
-                // passing current pdf from here
-                String pdfpath = allPdfList[position].getPath();
+            pdfListAdapter.setOnItemClickListener(new PdfListAdapter.OnItemClickListener() {
+                @Override
+                public void onItemClick(int position) {
+                    Intent intent = new Intent(NotesActivity.this, PdfActivity.class);
+                    // passing current pdf from here
+                    String pdfpath = allPdfList[position].getPath();
 
 
-                Log.d("chk", pdfpath);
+                    Log.d("chk", pdfpath);
 
-                intent.putExtra("PdfPath", pdfpath);
-                startActivity(intent);
-            }
-        });
+                    intent.putExtra("PdfPath", pdfpath);
+                    startActivity(intent);
+                }
+            });
+
+            PDFList.setLayoutManager(linearLayoutManager);
+            PDFList.setAdapter(pdfListAdapter);
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+
+
     }
 
     private File[] getPDFs(File[] allFiles) {
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.notesmaker\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'com.github.joielechong:countrycodepicker:2.4.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    implementation 'com.google.firebase:firebase-auth:16.0.5'\r\n    implementation 'com.google.firebase:firebase-ml-vision:15.0.0'\r\n    implementation 'com.getbase:floatingactionbutton:1.10.1'\r\n    implementation 'com.github.barteksc:android-pdf-viewer:1.6.0'\r\n    implementation files('../itextg-5.5.10.jar')\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.github.shubham0204:Text2Summary-Android:alpha-05'\r\n\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:1.3.72\"\r\n    implementation 'androidx.core:core-ktx:1.1.0'\r\n    implementation 'com.google.android.material:material:1.0.0'\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'\r\n\r\n\r\n\r\n}\r\n\r\nbuildscript {\r\n\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.0'\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision c3565c05b2813159c2c695d0c3fdd6709c656932)
+++ app/build.gradle	(date 1605161606833)
@@ -58,7 +58,7 @@
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.1.0'
+        classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.2.0'
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url 'https://jitpack.io' }\r\n        \r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.0'\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n\r\n\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url \"https://jitpack.io\" }\r\n        \r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision c3565c05b2813159c2c695d0c3fdd6709c656932)
+++ build.gradle	(date 1605161606814)
@@ -9,7 +9,7 @@
         
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.1.0'
+        classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.2.0'
 
 
